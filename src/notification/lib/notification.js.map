{"version":3,"file":"notification.js","sourceRoot":"","sources":["../notification.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, TemplateResult } from 'lit-html';\nimport { Property, SimplrComponentBase, CustomElement, css } from '@simplr-wc/core';\nimport { infoSign, errorSign, successSign, warningSign } from './notification-icons';\n\nexport type SimplrNotificationOptions = {\n    timeout?: number;\n    title: string;\n    message: string;\n    role?: NotificationRole | string;\n};\n\ntype NotificationRole = 'info' | 'error' | 'warning' | 'success';\n\n/**\n *   A Notification element From Simplr Components\n *\n *   Create a new Notification by calling the static function SimplrNotification.open();\n *\n *   @element simplr-notification\n *\n *   @prop {number} timeout          - Timeout of the Notification. Defaults to 4000, Set to 0 to disable timeout.\n *   @prop {string} title            - Title of the Notification\n *   @prop {string} message          - Message of the Notification\n *   @prop {NotificationRole} role   - Role of the Notification. Determines the color and icon.\n *\n *   @csspart [--success-color=#41d888]     - Color of the success-role Notification\n *   @csspart [--error-color=#f94416]       - Color of the error-role Notification\n *   @csspart [--info-color=#0087d7]        - Color of the info-role Notification\n *   @csspart [--warning-color=#ffbc00]     - Color of the warning-role Notification\n *\n * */\n@CustomElement('simplr-notification')\nexport class SimplrNotification extends SimplrComponentBase {\n    @Property({})\n    timeout: number = 4000;\n    @Property({})\n    title: string = '';\n    @Property({})\n    message: string = '';\n    @Property({})\n    role: NotificationRole | string = 'info';\n\n    private closeNotificationRef: EventListener | undefined;\n\n    /**\n     * Spawn a new Simplr Notification\n     *\n     * @param {SimplrNotificationOptions} options    - Options to build Notification from\n     * */\n    public static open(options: SimplrNotificationOptions) {\n        const notification = document.createElement('simplr-notification') as SimplrNotification;\n        if (typeof options.timeout !== 'undefined') {\n            notification.timeout = options.timeout;\n        }\n        notification.title = options.title;\n        notification.message = options.message;\n        if (options.role) {\n            notification.role = options.role;\n        }\n        document.body.appendChild(notification);\n    }\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n    }\n\n    connectedCallback() {\n        this.setAttribute(this.role, '');\n        this.addCloseListener();\n    }\n\n    private addCloseListener(): void {\n        if (this.timeout > 0) {\n            window.requestAnimationFrame(() => {\n                this.closeNotificationRef = this.closeNotification.bind(this);\n                const timeoutbar = this.shadowRoot?.querySelector('.timeout-bar');\n\n                timeoutbar?.addEventListener('animationend', this.closeNotificationRef);\n            });\n        }\n    }\n\n    private closeNotification(): void {\n        if (this.closeNotificationRef) {\n            this.removeEventListener('animationend', this.closeNotificationRef);\n        }\n\n        this.addEventListener('animationend', () => {\n            this.remove();\n        });\n        this.setAttribute('closing', '');\n    }\n\n    get html(): TemplateResult {\n        return html`\n            <div class=\"notification\">\n                <div class=\"icon-area\">\n                    <div class=\"status-icon\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                            <path d=\"\" />\n                        </svg>\n                    </div>\n                </div>\n                <div class=\"information-area\">\n                    <h2>${this.title}</h2>\n                    <p>${this.message}</p>\n                </div>\n                <div class=\"exit-button\" @click=${this.closeNotification.bind(this)}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                        <path d=\"${errorSign}\" />\n                    </svg>\n                </div>\n                <div class=\"timeout-bar\"></div>\n            </div>\n        `;\n    }\n\n    get css(): string {\n        return css`\n            :host {\n                --success-color: #41d888;\n                --error-color: #f94416;\n                --info-color: #0087d7;\n                --warning-color: #ffbc00;\n\n                --notification-color: var(--info-color);\n                --icon-size: 18px;\n\n                --min-height: 100px;\n\n                display: block;\n                color: #fff;\n                width: 350px;\n                min-height: var(--min-height);\n                border-radius: 4px;\n                background: var(--notification-color);\n                box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14),\n                    0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n\n                opacity: 1;\n                transition: 200ms ease-in-out;\n\n                animation-name: slide-in;\n                animation-duration: 500ms;\n                position: static;\n                top: 0;\n                left: 0;\n                right: 0;\n                margin: 1rem auto 0\n            }\n\n            @keyframes slide-in {\n                from {\n                    transform: translate(0, -100px);\n                    opacity: 0;\n                }\n            }\n\n            :host([closing]) {\n                animation-name: closing-animation;\n                animation-duration: 1000ms;\n            }\n\n            @keyframes closing-animation {\n                0% {\n                    opacity: 1;\n                }\n\n                50% {\n                    opacity: 0;\n                    min-height: var(--min-height);\n                    margin: 1rem auto 0;\n                }\n                100% {\n                    opacity: 0;\n                    height: 0;\n                    min-height: 0;\n                    margin: 0 auto;\n                }\n            }\n\n            :host([success]) {\n                --notification-color: var(--success-color);\n            }\n            :host([error]) {\n                --notification-color: var(--error-color);\n            }\n            :host([info]) {\n                --notification-color: var(--info-color);\n            }\n            :host([warning]) {\n                --notification-color: var(--warning-color);\n            }\n\n            :host([success]) .status-icon path {\n                d: path(\"${successSign}\");\n            }\n            :host([error]) .status-icon path {\n                d: path(\"${errorSign}\");\n            }\n            :host([info]) .status-icon path {\n                d: path(\"${infoSign}\");\n            }\n            :host([warning]) .status-icon path {\n                d: path(\"${warningSign}\");\n            }\n\n            .notification {\n                position: relative;\n                display: flex;\n                justify-content: space-between;\n                width: 100%;\n                min-height: inherit;\n            }\n\n            .status-icon svg {\n                fill: var(--notification-color);\n                width: var(--icon-size);\n                height: var(--icon-size);\n            }\n\n            .exit-button svg {\n                fill: #FFF;\n                width: 10px;\n                height: 10px;\n            }\n\n            .exit-button {\n                position: absolute;\n                top:7.5px;\n                right: 10px;\n                color: #FFF;\n                cursor: pointer;\n            }\n\n            .icon-area {\n                flex-basis: 17.5%;\n                display: flex;\n                justify-content: center;\n                padding-top: 1.25rem;\n            }\n\n            .status-icon {\n                width: calc(var(--icon-size) * 2);\n                height: calc(var(--icon-size) * 2);\n                border-radius: 50%;\n                background: #FFF;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n\n                box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n                    0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n            }\n\n            .information-area {\n                flex-basis: 80%;\n                padding: 4px 0 0;\n            }\n\n            .information-area h2 {\n                font-size: 1.2rem;\n                margin: 0.85rem 0 0.5rem\n            }\n\n            .information-area p {\n                font-size: 0.875rem;\n                margin: 0 0 1.5rem;\n            }\n\n            .timeout-bar {\n                width: 0%;\n                position: absolute;\n                bottom: 0;\n                left: 0;\n                height: 10px;\n                background: rgba(255,255,255, 0.6);\n                animation-duration: ${this.timeout}ms;\n                animation-name: timeout-animation;\n                animation-timing-function: linear;\n            }\n\n            @keyframes timeout-animation {\n                from {\n                    width: 100%;\n                }\n            }\n        `;\n    }\n}\n"]}