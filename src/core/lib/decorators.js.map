{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../decorators.ts"],"names":[],"mappings":"AAgBA,MAAM,UAAU,aAAa,CAAiC,aAAqB;IAC/E,OAAO,UAAU,iBAAmD;QAChE,iBAAiB,CAAC,GAAG,GAAG,aAAa,CAAC;QACtC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;YACpC,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;SAC3D;IACL,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAsB;IAC3C,6BAA6B;IAC7B,OAAO,UAAU,SAA8B,EAAE,IAAiB;QAC9D,MAAM,MAAM,GAAG;YACX,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC;QAEF,MAAM,MAAM,GAAG,UAAqC,KAAU;YAC1D,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAClC,yBAAyB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YACvE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;QACzD,CAAC,CAAC;QAEF,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE;YACnC,GAAG,EAAE,MAAM;YACX,GAAG,EAAE,MAAM;SACd,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAED,SAAS,yBAAyB,CAC9B,KAA0B,EAC1B,IAAY,EACZ,KAAuB,EACvB,OAA4B;IAE5B,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,WAAW;QAAE,OAAO;IAEvD,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IACjC,QAAQ,OAAO,KAAK,EAAE;QAClB,KAAK,SAAS,CAAC,CAAC;YACZ,IAAI,KAAK,EAAE;gBACP,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;aACjC;iBAAM;gBACH,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;aAChC;YACD,MAAM;SACT;QACD,KAAK,QAAQ,CAAC,CAAC;YACX,IAAI,KAAK,IAAI,IAAI,EAAE;gBACf,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;aAChC;iBAAM;gBACH,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACpC;YACD,MAAM;SACT;KACJ;AACL,CAAC","sourcesContent":["import { SimplrComponentBase } from './simplr-component-base';\n\ntype Constructor<T> = {\n    new (...args: any[]): T;\n    _is: string;\n};\n\nexport type PropertyOptions = {\n    reflect?: boolean;\n    type?: any;\n    default?: any;\n    value?: any;\n};\n\nexport type UpdatedProperties<T = any> = keyof T extends PropertyKey ? Map<keyof T, unknown> : never;\n\nexport function CustomElement<_T extends SimplrComponentBase>(componentName: string): Function {\n    return function (componentInstance: Constructor<SimplrComponentBase>) {\n        componentInstance._is = componentName;\n        if (!customElements.get(componentName)) {\n            customElements.define(componentName, componentInstance);\n        }\n    };\n}\n\nexport function Property(_opts: PropertyOptions) {\n    // TODO: Property type checks\n    return function (prototype: SimplrComponentBase, name: PropertyKey) {\n        const getter = function (this: SimplrComponentBase) {\n            return this._properties.get(name);\n        };\n\n        const setter = function (this: SimplrComponentBase, value: any) {\n            const oldValue = this._properties.get(name);\n            this._properties.set(name, value);\n            handleAttributeReflection(this, name.toString(), value, _opts.reflect);\n            this._queuePropertyUpdate(name.toString(), oldValue);\n        };\n\n        Object.defineProperty(prototype, name, {\n            get: getter,\n            set: setter,\n        });\n    };\n}\n\nfunction handleAttributeReflection(\n    _this: SimplrComponentBase,\n    name: string,\n    value: string | boolean,\n    reflect: boolean | undefined,\n) {\n    if (!reflect || typeof reflect === 'undefined') return;\n\n    const nameL = name.toLowerCase();\n    switch (typeof value) {\n        case 'boolean': {\n            if (value) {\n                _this.setAttribute(nameL, '');\n            } else {\n                _this.removeAttribute(nameL);\n            }\n            break;\n        }\n        case 'string': {\n            if (value == null) {\n                _this.removeAttribute(nameL);\n            } else {\n                _this.setAttribute(nameL, value);\n            }\n            break;\n        }\n    }\n}\n"]}